colnames(intra.day.test) <- colnames(data)
data = data.frame(rbind(data, intra.day.test))
}
# Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
# Creating lag and lead features of price column.
data <- xts::xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=stats::lag(data[,'data.Adjusted'],c(-1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
20,30,40,50,60,100,150,200,250,300))))
# Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
# Naming variables for reference
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
# Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
# Creating train and test sets
train<-data[stats::complete.cases(data),]
test<-data[nrow(data),]
# Training model
model<-stats::glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
#data.Adjusted.5+data.Adjusted.6+data.Adjusted.7+
#data.Adjusted.8+data.Adjusted.9+data.Adjusted.10+
#data.Adjusted.11+data.Adjusted.12+data.Adjusted.13+
#data.Adjusted.14+data.Adjusted.15+data.Adjusted.16+
#data.Adjusted.17+data.Adjusted.18+data.Adjusted.19+
#data.Adjusted.20+data.Adjusted.21+data.Adjusted.22+
#data.Adjusted.23+data.Adjusted.24+data.Adjusted.25+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
# Making Predictions
pred<-as.numeric(stats::predict(model,test[,
c(
'data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted',
'data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4',
#"data.Adjusted.5" ,"data.Adjusted.6","data.Adjusted.7",
#"data.Adjusted.8","data.Adjusted.9","data.Adjusted.10",
#"data.Adjusted.11","data.Adjusted.12","data.Adjusted.13",
#"data.Adjusted.14","data.Adjusted.15","data.Adjusted.16",
#"data.Adjusted.17","data.Adjusted.18","data.Adjusted.19",
#"data.Adjusted.20","data.Adjusted.21","data.Adjusted.22",
#"data.Adjusted.23","data.Adjusted.24","data.Adjusted.25",
'Day_of_month','Month_of_year','Year','Day_of_week')
],type = 'response'))
## Buy Signal
x <- data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
if (test.new.price == 0) {
x = x
} else {
intra.day.test <- matrix(c(0,0,0,test.new.price,0,0), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
colnames(intra.day.test) <- colnames(x)
x = data.frame(rbind(x, intra.day.test))
}
Close<-x[,4] # Define Close as adjusted closing price
# A new function needs redefine data from above:
# Create SMA for multiple periods
SMA10<-TTR::SMA(Close,n=10)
SMA20<-TTR::SMA(Close,n=20)
SMA30<-TTR::SMA(Close,n=30)
SMA50<-TTR::SMA(Close,n=50)
SMA200<-TTR::SMA(Close,n=200)
SMA250<-TTR::SMA(Close,n=250)
# Create RSI for multiple periods
RSI10 <- (TTR::RSI(Close,n=10)-50)*height
RSI20 <- (TTR::RSI(Close,n=20)-50)*height
RSI30 <- (TTR::RSI(Close,n=30)-50)*height
RSI50 <- (TTR::RSI(Close,n=50)-50)*height
RSI200 <- (TTR::RSI(Close,n=200)-50)*height
RSI250 <- (TTR::RSI(Close,n=250)-50)*height
# Create computable dataset: Close/SMA_i-1
ratio_10<-(Close/SMA10-1)
ratio_20<-(Close/SMA20-1)
ratio_30<-(Close/SMA30-1)
ratio_50<-(Close/SMA50-1)
ratio_200<-(Close/SMA200-1)
ratio_250<-(Close/SMA250-1)
all_data_ratio <- cbind.data.frame(
ratio_10,
ratio_20,
ratio_30,
ratio_50,
ratio_200,
ratio_250
)
# Here we want to create signal for each column
# Then we add them all together
all_data_ratio[is.na(all_data_ratio)] <- 0 # Get rid of NAs
sd(all_data_ratio[,1])
sd(all_data_ratio[,2])
sd(all_data_ratio[,3])
sd(all_data_ratio[,4])
sd(all_data_ratio[,5])
sd(all_data_ratio[,6])
m<-height*mean(Close)
# Buy Signal
coef<-c.buy
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] <= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] <= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] <= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] <= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] <= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] <= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_buy_signal <- all_data_signal
# Sell Signal
coef<-c.sell
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] >= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] >= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] >= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] >= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] >= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] >= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_sell_signal <- all_data_signal
# Consolidate
# Here let us put buy sell signal table together
final_table <- cbind.data.frame(
Date = rownames(x),
Buy_Sginal = all_data_buy_signal,
Sell_Signal = all_data_sell_signal
)[, -4]
reduced_table <- data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),]);
colnames(reduced_table) <- c("Date", paste0("ClosePriceof",symbol), "BuySignal", "SellSignal");
rownames(reduced_table) <- reduced_table$Date
# Record the statistics
final_table_stats <- rbind(
BuySignalStats = c(plyr::count(as.numeric(final_table[,3] > 0))[2,2]/sum(plyr::count(as.numeric(final_table[,3] > 0))[,2]), mean(final_table[,3]), sd(final_table[,3])),
SellSignalStats = c(plyr::count(as.numeric(final_table[,4] > 0))[2,2]/sum(plyr::count(as.numeric(final_table[,4] > 0))[,2]), mean(final_table[,4]), sd(final_table[,4]))
); colnames(final_table_stats) <- c("ActionFreq", "Mean", "SD"); final_table_stats <- round(final_table_stats, 2)
# Printing results
return(list(
TS.Result = (paste0("Tomorrow this stock goes up with probability: ", round(pred, 2))),
Buy.Sell.Signal.Table = knitr::kable(reduced_table[, -1]),
Statistics = knitr::kable(final_table_stats),
Comment = paste0(
"We recommend buy frequency to be less than ", final_table_stats[1,1],
" for the first entry. Moreover, the expectation of buy signals is ", final_table_stats[1,2],
" and the standard deviation is ", final_table_stats[1,3],
", respectively. Hence, we conclude: ", ifelse(reduced_table[nrow(reduced_table), 3] < final_table_stats[1,2], "Do nothing.", "Enter this stock.")),
Notes = paste0("PS: We recommend action frequency (ActionFreq) to be less than 5% and do nothing if signal values are less than 1 SD above Mean.")
))
}
yins_predictor('AAPL', test.new.price = 100)
starting.percentile=.8; ending.percentile=1; c.buy=-1.96; c.sell=+1.96; height=1; past.n.days=3; test.new.price=0
# To ignore the warnings during usage
options(warn=-1)
options("getSymbols.warning4.0"=FALSE)
# Importing price data for the given symbol
data<-data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
# Update new prices if user observes unlikely intra day pricing
if (test.new.price == 0) {
data = data
} else {
intra.day.test <- matrix(c(0,0,0,test.new.price,0,0), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
colnames(intra.day.test) <- colnames(data)
data = data.frame(rbind(data, intra.day.test))
}
# Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
# Creating lag and lead features of price column.
data <- xts::xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=stats::lag(data[,'data.Adjusted'],c(-1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
20,30,40,50,60,100,150,200,250,300))))
# Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
# Naming variables for reference
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
# Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
# Creating train and test sets
train<-data[stats::complete.cases(data),]
test<-data[nrow(data),]
# Training model
model<-stats::glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
#data.Adjusted.5+data.Adjusted.6+data.Adjusted.7+
#data.Adjusted.8+data.Adjusted.9+data.Adjusted.10+
#data.Adjusted.11+data.Adjusted.12+data.Adjusted.13+
#data.Adjusted.14+data.Adjusted.15+data.Adjusted.16+
#data.Adjusted.17+data.Adjusted.18+data.Adjusted.19+
#data.Adjusted.20+data.Adjusted.21+data.Adjusted.22+
#data.Adjusted.23+data.Adjusted.24+data.Adjusted.25+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
# Making Predictions
pred<-as.numeric(stats::predict(model,test[,
c(
'data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted',
'data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4',
#"data.Adjusted.5" ,"data.Adjusted.6","data.Adjusted.7",
#"data.Adjusted.8","data.Adjusted.9","data.Adjusted.10",
#"data.Adjusted.11","data.Adjusted.12","data.Adjusted.13",
#"data.Adjusted.14","data.Adjusted.15","data.Adjusted.16",
#"data.Adjusted.17","data.Adjusted.18","data.Adjusted.19",
#"data.Adjusted.20","data.Adjusted.21","data.Adjusted.22",
#"data.Adjusted.23","data.Adjusted.24","data.Adjusted.25",
'Day_of_month','Month_of_year','Year','Day_of_week')
],type = 'response'))
pred
test.new.price=50
data<-data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
tail(data)
rep(test.new.price,6)
intra.day.test <- matrix(rep(test.new.price,6), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
colnames(intra.day.test) <- colnames(data)
data = data.frame(rbind(data, intra.day.test))
# Update new prices if user observes unlikely intra day pricing
if (test.new.price == 0) {
data = data
} else {
intra.day.test <- matrix(rep(test.new.price,6), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
colnames(intra.day.test) <- colnames(data)
data = data.frame(rbind(data, intra.day.test))
}
tail(data)
data<-data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
# Update new prices if user observes unlikely intra day pricing
if (test.new.price == 0) {
data = data
} else {
intra.day.test <- matrix(rep(test.new.price,6), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
colnames(intra.day.test) <- colnames(data)
data = data.frame(rbind(data, intra.day.test))
}
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
# Creating lag and lead features of price column.
data <- xts::xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=stats::lag(data[,'data.Adjusted'],c(-1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
20,30,40,50,60,100,150,200,250,300))))
# Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
# Naming variables for reference
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
# Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
# Creating train and test sets
train<-data[stats::complete.cases(data),]
test<-data[nrow(data),]
# Training model
model<-stats::glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
#data.Adjusted.5+data.Adjusted.6+data.Adjusted.7+
#data.Adjusted.8+data.Adjusted.9+data.Adjusted.10+
#data.Adjusted.11+data.Adjusted.12+data.Adjusted.13+
#data.Adjusted.14+data.Adjusted.15+data.Adjusted.16+
#data.Adjusted.17+data.Adjusted.18+data.Adjusted.19+
#data.Adjusted.20+data.Adjusted.21+data.Adjusted.22+
#data.Adjusted.23+data.Adjusted.24+data.Adjusted.25+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
# Making Predictions
pred<-as.numeric(stats::predict(model,test[,
c(
'data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted',
'data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4',
#"data.Adjusted.5" ,"data.Adjusted.6","data.Adjusted.7",
#"data.Adjusted.8","data.Adjusted.9","data.Adjusted.10",
#"data.Adjusted.11","data.Adjusted.12","data.Adjusted.13",
#"data.Adjusted.14","data.Adjusted.15","data.Adjusted.16",
#"data.Adjusted.17","data.Adjusted.18","data.Adjusted.19",
#"data.Adjusted.20","data.Adjusted.21","data.Adjusted.22",
#"data.Adjusted.23","data.Adjusted.24","data.Adjusted.25",
'Day_of_month','Month_of_year','Year','Day_of_week')
],type = 'response'))
colnames(test)
tail(test)
devtools::install_github("yiqiao-yin/YinsPredictoR3_0", force=TRUE)
YinsPredictoR::yins_predictor('AAPL')
YinsPredictoR::yins_predictor('AAPL', test.new.price = 100)
devtools::install_github("yiqiao-yin/YinsPredictoR3_0", force=TRUE)
YinsPredictoR::yins_predictor('AAPL')
YinsPredictoR::yins_predictor('AAPL', test.new.price = 100)
YinsPredictoR::yins_predictor('AMZN')
YinsPredictoR::yins_predictor('AMZN', test.new.price = 1588)
YinsPredictoR::yins_predictor('AMZN', test.new.price = 1500)
rm(list = ls())
YinsPredictoR::yins_predictor('AMZN')
YinsPredictoR::yins_predictor('AMZN', test.new.price = 1400)
YinsPredictoR::yins_predictor('AMZN', test.new.price = 1450)
YinsPredictoR::yins_predictor('AMZN')
YinsPredictoR::yins_predictor('AMZN')
YinsPredictoR::yins_predictor('AMZN', test.new.price = 1450)
YinsPredictoR::yins_predictor('AMZN', test.new.price = 1550)
sd(c(10,15,50))^2
sd(c(12,17,19))^2
((3-1(*475 + (3-1)*13)))/(3+3-2)
((3-1)*475 + (3-1)*13)/(3+3-2)
(25-16)/(sqrt(244) * sqrt(1/3 + 1/3))
# data
x <- c(10,15,50); y <- c(12,17,19)
t.test(x,y,var.equal=T,alternative="greater")
# (b)
9/20
permutate
# (b)
permute
# (b)
6*5*4/(3*2)
9/20
rm(list=ls())
install.packages(c("igraph", "Rglpk", "stringr", "XML"))
# Set Working Directory
setwd("C:/Users/eagle/Desktop/AppFigures-take-home-challenge")
untar("tmp.tar.gz",list=TRUE)  ## check contents
untar("../data/takehome.tar.gz",list=TRUE)  ## check contents
setwd("C:/Users/eagle/Desktop/AppFigures-take-home-challenge")
untar("/data/takehome.tar.gz",list=TRUE)  ## check contents
# Set Working Directory
setwd("C:/Users/eagle/Desktop/AppFigures-take-home-challenge/")
untar("/data/takehome.tar.gz",list=TRUE)  ## check contents
# Set Working Directory
path <- "C:/Users/eagle/Desktop/AppFigures-take-home-challenge/"
setwd(path)
paste0(path,"/data/takehome.tar.gz")
untar(paste0(path,"data/takehome.tar.gz"),list=TRUE)  ## check contents
untar(paste0(path,"data/take_home.tar.gz"),list=TRUE)  ## check contents
ranks <- untar(paste0(path,"data/take_home.tar.gz"),list=TRUE,files="ranks.csv")
ranks
?untar
untar(paste0(path,"data/take_home.tar.gz"),files="ranks.csv")
untar(paste0(path,"data/take_home.tar.gz"),files="sales.csv")
untar(paste0(path,"data/take_home.tar.gz"),files="/data/ranks.csv")
untar(paste0(path,"data/take_home.tar.gz"),files="/data/sales.csv")
paste0(path,"data/take_home.tar.gz")
paste0(path,"/data/ranks.csv")
paste0(path,"data/ranks.csv")
paste0(path,"data/ranks.csv")
untar(paste0(path,"data/take_home.tar.gz"),files=paste0(path,"data/sales.csv"))
paste0(path,"data/sales.csv")
paste0(path,"data/sales.csv")
untar(paste0(path,"data/take_home.tar.gz"),files=paste0(path,"data/ranks.csv"))
untar(paste0(path,"data/take_home.tar.gz"),files=paste0(path,"data/ranks.csv"))
untar(paste0(path,"data/take_home.tar.gz"),list=FALSE)  # This untar the .tar.gz format file
# Clear all global environment
rm(list=ls())
rm(list=ls())
path <- "C:/Users/eagle/Desktop/AppFigures-take-home-challenge/"
setwd(path)
untar(paste0(path,"data/take_home.tar.gz"),list=TRUE)  # This untar the .tar.gz format file
untar(paste0(path,"data/take_home.tar.gz"),list=TRUE)  # This untar the .tar.gz format file
untar(paste0(path,"data/take_home.tar.gz"),list=FALSE)  # This untar the .tar.gz format file
# Set Working Directory
path <- "C:/Users/eagle/Desktop/AppFigures-take-home-challenge/data"
rm(list=ls())
path <- "C:/Users/eagle/Desktop/AppFigures-take-home-challenge/data"
setwd(path)
untar(paste0(path,"/take_home.tar.gz"),list=TRUE)  # This untar the .tar.gz format file and list the names of files
untar(paste0(path,"/take_home.tar.gz"),list=FALSE)  # This untar the .tar.gz format file and save files in folders
rm(list=ls())
# Set Working Directory
path <- "C:/Users/eagle/Desktop/AppFigures-take-home-challenge/data"
setwd(path)
untar(paste0(path,"/take_home.tar.gz"),list=TRUE)  # This untar the .tar.gz format file and list the names of files
# Then we should see the following
# [1] "ranks.csv" "sales.csv"
untar(paste0(path,"/take_home.tar.gz"),list=FALSE)  # This untar the .tar.gz format file and save files in folders
ranks <- read.csv("ranks.csv")
sales <- read.csv("sales.csv")
# Preview data
# For the first data, ranks
head(ranks); dim(ranks); str(ranks)
# We are working with a data with large number of samples, over 90,000 and a normal amoount of columnas, 36
# For the second data, sales
head(sales); dim(sales)l str(sales)
# We are working with a data with large number of samples, over 90,000 and a normal amoount of columnas, 36
# For the second data, sales
head(sales); dim(sales); str(sales)
nrow(sales)
unique(ranks$app_id)
length(unique(ranks$app_id))
nrow(sales);
length(unique(ranks$app_id))
# Check NA entries
dim(ranks) == dim(na.omit(ranks))
na.omit(ranks)
dim(na.omit(ranks))
dim(ranks)
dim(ranks) == dim(na.omit(ranks))
dim(sales) == dim(na.omit(sales))
sales
na.omit(sales)
ranks[1:10, 1:5]
head(sales)
unique(ranks$app_id)
length(unique(ranks$app_id))
length(unique(ranks$app_id))
length(unique(sales$app_id))
length(unique(ranks$app_id))
length(unique(sales$app_id))
length(unique(ranks$app_id))
length(unique(sales$app_id))
view(ranks)
View(ranks)
View(sales)
ranks[1,]
ranks[ranks$app_id == 1,]
ranks[ranks$app_id == id,]
id <- 1
ranks[ranks$app_id == id,]
id_1 <- ranks[ranks$app_id == id,]
id_1 <- data.frame(na.omit(ranks[ranks$app_id == id,])); head(id_1); dim(id_1)
plot(id_1$r0)
plot(id_1$r0); lines(id_1$r2)
plot(id_1$r0);
lines(id_1$r1)
plot(id_1$r0);
lines(id_1$r0)
lines(id_1$r0)
plot9); lines(id_1$r0)
plot(); lines(id_1$r0)
plot(id_1$Date); lines(id_1$r0)
plot(x = id_1$Date, y = id_1$r0, pch = 1)
plot(x = id_1$Date, y = id_1$r0, pch = 0)
plot(x = id_1$Date, y = id_1$r0, pch = 2)
plot(x = id_1$Date, y = id_1$r0, pch = 3)
plot(x = id_1$Date, y = id_1$r0, pch = 3)
plot(x = id_1$Date, y = id_1$r0)
plot(x = id_1$Date, y = id_1$r0)
plot(x = id_1$Date, y = id_1$r0); lines(id_1$r0)
id <- 1
id_1 <- data.frame(na.omit(ranks[ranks$app_id == id,])); head(id_1); dim(id_1)
plot(x = id_1$Date, y = id_1$r0); lines(id_1$r0)
id <- 1
id_1 <- data.frame(na.omit(ranks[ranks$app_id == id,])); head(id_1); dim(id_1)
ggplot(id_1, aes(x = id_1$Date, y = id_1$r0))
library(ggplot2)
ggplot(id_1, aes(x = id_1$Date, y = id_1$r0))
plot(id_1$r0)
plot(id_1$r0 ~ id_1$Date)
lines(id_1$r2)
lines(id_1$r2); lines(id_1$r3)
lines(id_1$r3)
plot(id_1$r0 ~ id_1$Date);
lines(id_1$r2); lines(id_1$r3)
plot(id_1$r0 ~ id_1$Date);
lines(id_1$r2); lines(id_1$r3)
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, group = id_1$app_id''))
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, group = id_1$app_id))
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, group = id_1$app_id)) + geom_density()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r1, group = id_1$app_id)) + geom_density()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r1)) + geom_density()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0)) + geom_density()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, height = id_1$r0)) + geom_density()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, height = id_1$r0)) + geom_bar()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, height = id_1$r0)) + geom_line()
ggplot2::ggplot(data = id_1, aes(x = id_1$Date, y = id_1$r0, height = id_1$r0)) + geom_line()
rm(list=ls())
library(YinsPredictoR)
YinsPredictoR::yins_predictor_beta('NFLX')
setwd("C:/Users/eagle/Desktop")
rm(list=ls())
